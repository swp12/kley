#!/bin/bash
# Made by Pserg
# Version: 1.1

if [ $# -lt 1 ]; then
    echo usage:  error.
    exit 1
fi

# get all domains of all users
if [ $4 -eq 2 ]
then 
    for i in $(/usr/local/vesta/bin/v-list-users | tail -n +3 | cut -f1 -d' ' |  xargs)
        do 
            /usr/local/vesta/bin/v-list-web-domains $i|  tail -n +3 | cut -f1 -d' ' |  xargs 
        done
        exit 1
fi

domain=$(echo $1 | tr '[:upper:]' '[:lower:]') 

PATH=$PATH:/usr/local/vesta/bin
export PATH

user=$(/usr/local/vesta/bin/v-search-domain-owner $domain)
echo "~~~~================================================================="
echo ""

# email="info@$domain";
if [ $# -gt 1 ]; then
    newdomain=$2
fi
if [ -z "$user" ]
then
echo ""
      echo "\$user is empty $3"
	  echo ""
	  user=$3
else
echo ""
      echo "$user exist"
	  echo ""
fi
if [ ! -d "/home/$user" ]; then
    echo "User doesn't exist";
    exit 1;
fi

/usr/local/vesta/bin/v-add-domain $user $newdomain
# /usr/local/vesta/bin/v-change-web-domain-backend-tpl $user $newdomain hosting yes
# /usr/local/vesta/bin/v-change-web-domain-backend-tpl $user $newdomain phpcgi yes

WORKINGDIR="/home/$user/web/$newdomain/public_shtml"
# FILE=latest.tar.gz

rm -rf $WORKINGDIR/*

cp -r /home/$user/web/$domain/public_html/. /home/$user/web/$newdomain/public_shtml

echo " Moved files to temp directory /home/$user/web/$newdomain/public_shtml" 

wpdbname=$(cat /home/$user/web/$newdomain/public_shtml/wp-config.php | grep DB_NAME | cut -d \' -f 4)
wpdbuser=$(cat /home/$user/web/$newdomain/public_shtml/wp-config.php | grep DB_USER | cut -d \' -f 4)
wpdbpass=$(cat /home/$user/web/$newdomain/public_shtml/wp-config.php | grep DB_PASSWORD | cut -d \' -f 4)

echo ""
echo "DB_NAME: $wpdbname"
echo ""
echo "DB_USER: $wpdbuser"
echo ""
echo "DB_PASSWORD: $wpdbpass"
echo ""

mysqldump -u $wpdbuser -p$wpdbpass $wpdbname  > /home/$user/web/$newdomain/public_shtml/dump.sql
sed -i   "s/$domain/$newdomain/g" /home/$user/web/$newdomain/public_shtml/dump.sql
uniq=$(cat /proc/sys/kernel/random/uuid | cut -c1-3)
newdbname="${user}_db_${uniq}"
newdbuser="${user}_db_${uniq}"
newpass=$(cat /proc/sys/kernel/random/uuid | cut -c1-16)

/usr/local/vesta/bin/v-add-database $user "db_${uniq}" "db_${uniq}" $newpass

echo "Created new database"
echo ""
echo "NEW DB_NAME: $newdbname"
echo ""
echo "NEW DB_USER: $newdbuser"
echo ""
echo "NEW DB_PASSWORD: $newpass"
echo ""

mysql -u $newdbuser -p$newpass $newdbname < /home/$user/web/$newdomain/public_shtml/dump.sql

echo "Updated new database"
echo ""

sed -i   "s/$domain/$newdomain/g" /home/$user/web/$newdomain/public_shtml/wp-config.php
sed -i   "s/$wpdbname/$newdbname/g" /home/$user/web/$newdomain/public_shtml/wp-config.php
sed -i   "s/$wpdbuser/$newdbuser/g" /home/$user/web/$newdomain/public_shtml/wp-config.php
sed -i   "s/$wpdbpass/$newpass/g" /home/$user/web/$newdomain/public_shtml/wp-config.php
sed -i   "s/$domain/$newdomain/g" /home/$user/web/$newdomain/public_shtml/robots.txt

echo "Changed wp-config.php and robots.txt"
echo ""

find /home/$user/web/$newdomain/public_shtml/ -name 'yandex*html'  -delete
rm /home/$user/web/$newdomain/public_shtml/dump.sql

echo "Deleted yandex file and dump"
echo ""
rm -rf /home/$user/web/$newdomain/public_html/*
cp -r /home/$user/web/$newdomain/public_shtml/. /home/$user/web/$newdomain/public_html

chown -R $user:$user /home/$user/web/$newdomain/public_html

echo "Moved files to /home/$user/web/$newdomain/public_html"
echo ""

rm -rf /home/$user/web/$newdomain/public_shtml/*

echo "Deleted temp files from /home/$user/web/$newdomain/public_shtml"
echo "" 

CONFIGDIR="/home/$user/conf/web/"    
#     OLDCONFIG=$CONFIGDIR$domain".nginx.conf"
APSSLCONFIG="$CONFIGDIR$domain.apache2.ssl.conf"
if [ -f "$APSSLCONFIG" ]
then
    cp $CONFIGDIR$domain.apache2.ssl.conf $CONFIGDIR$newdomain.apache2.ssl.conf
    sed -i   "s/$domain/$newdomain/g" $CONFIGDIR$newdomain.apache2.ssl.conf
fi

redirect(){
    OLDCONFIG=$1
    TEMPCONFIG=$CONFIGDIR"tempconf.txt"
    if ( echo $OLDCONFIG| grep  "ssl")
    then 
    # https
        #OLDCONFIG=$HTTPSCONF
        NEWCONFIG="$CONFIGDIR$newdomain.nginx.ssl.conf"
        cp $OLDCONFIG $NEWCONFIG
        cp $CONFIGDIRssl.$domain.key $CONFIGDIRssl.$newdomain.key
        cp $CONFIGDIRssl.$domain.crt $CONFIGDIRssl.$newdomain.crt
        cp $CONFIGDIRssl.$domain.ca  $CONFIGDIRssl.$newdomain.ca
        cp $CONFIGDIRssl.$domain.pem $CONFIGDIRssl.$newdomain.pem
        sed -i   "s/$domain/$newdomain/g" $NEWCONFIG
        
        echo "Copied ssl settings"
        echo ""
        
        sed -i "/location \/ {/{N;a \        if \(\$http_user_agent \~\* \"Googlebot\|Googlebot-Video\|APIs-Google\|AdsBot-Google-Mobile\|AdsBot-Google\|Googlebot-Image\|Googlebot-News\|AdsBot-Google-Mobile-Apps\"\) \{ \n           rewrite \^\/\(.*\)\$ https:\/\/$newdomain/\$1 permanent; \n        \} \n        if \(\$http_user_agent \~\* \"YandexBot\|YandexDirect\|YandexImages\|YandexMetrika\|YandexMobileBot\|YandexMedia\|YandexNews\|YandexPagechecker\|YandexMarket\|YandexCalenda\|YandexDirectDyn\|YaDirectFetcher\|YandexAccessibilityBot\|YandexScreenshotBot\|YandexVideoParser\|YandexSearchShop\|YandexOntoDBAPI\"\) \{ \n           rewrite \^\/\(.*\)\$ https:\/\/$newdomain/\$1 permanent; \n        \} \n
    }" $OLDCONFIG
        
    else
    # http
        #OLDCONFIG=$CONFIGDIR$domain".nginx.conf"
        
        sed -i "/location \/ {/{N;a \        if \(\$http_user_agent \~\* \"Googlebot\|Googlebot-Video\|APIs-Google\|AdsBot-Google-Mobile\|AdsBot-Google\|Googlebot-Image\|Googlebot-News\|AdsBot-Google-Mobile-Apps\"\) \{ \n           rewrite \^\/\(.*\)\$ http:\/\/$newdomain/\$1 permanent; \n        \} \n        if \(\$http_user_agent \~\* \"YandexBot\|YandexDirect\|YandexImages\|YandexMetrika\|YandexMobileBot\|YandexMedia\|YandexNews\|YandexPagechecker\|YandexMarket\|YandexCalenda\|YandexDirectDyn\|YaDirectFetcher\|YandexAccessibilityBot\|YandexScreenshotBot\|YandexVideoParser\|YandexSearchShop\|YandexOntoDBAPI\"\) \{ \n           rewrite \^\/\(.*\)\$ http:\/\/$newdomain/\$1 permanent; \n        \} \n
    }" $OLDCONFIG
    fi


    proxy_l_number=$( grep -n "proxy_pass" $OLDCONFIG | cut -d : -f 1| sed -n '1p')
    proxy_line=$(head -n"${proxy_l_number}"  $OLDCONFIG|tail -1 )
    location_line_number=$( grep -n "location / {" $OLDCONFIG | cut -d : -f 1 )

    newproxy_l_number=$(($location_line_number-1))

    head -n$newproxy_l_number  $OLDCONFIG >> $TEMPCONFIG
    if (grep "robots.txt" $OLDCONFIG)
    then
        echo ""
        echo "robots.txt already exist in old config"
    else
        echo "    location = /robots.txt {" >> $TEMPCONFIG
        echo "        allow all;" >> $TEMPCONFIG
        echo "$proxy_line" >> $TEMPCONFIG
        echo "}" >> $TEMPCONFIG
    fi
    tail  -n +$newproxy_l_number $OLDCONFIG >> $TEMPCONFIG

    echo "Changed nginx config of old domain"
    echo "Please, check config $OLDCONFIG" 
    echo "#################################################################"
    cat $TEMPCONFIG
    echo "#################################################################"

    cp $TEMPCONFIG $OLDCONFIG
    rm $TEMPCONFIG

    echo "" 
    echo "Deleted temp config"
    echo "" 
}
 
if [ $4 -eq 1 ]
then
    echo "Without reconfig nginx to redirection"
    echo "" 
else
# with nginx reconfig for redirect 
    
    redirect $CONFIGDIR$domain".nginx.conf"
    HTTPSCONF=$CONFIGDIR$domain".nginx.ssl.conf"
    if [ -f "$HTTPSCONF" ]
    then 
        redirect $HTTPSCONF
    fi
    nginx -t && systemctl reload nginx || printf '<b>Error!!!</b>\n'
fi 

echo "" 
echo "Everything is done, master!"
echo "" 
echo "=================================================================~~~~"

chown -R $user:$user $WORKINGDIR

# rm -rf /home/$user/wp

echo "Perekleyka: Done."
exit 0
